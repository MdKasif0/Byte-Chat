
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthed() {
      return request.auth != null;
    }

    function uid() {
      return request.auth.uid;
    }

    function isOwner(userId) {
      return isAuthed() && uid() == userId;
    }

    function incomingData() {
      return request.resource.data;
    }

    function isChatMember(chatId) {
      return isAuthed() && get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([uid()]);
    }

    // Collections
    match /users/{userId} {
      allow get, list: if isAuthed();
      allow create: if isOwner(userId)
                    && incomingData().uid == userId;
      allow update: if isOwner(userId)
                     && incomingData().uid == userId
                     && incomingData().email == resource.data.email;
    }

    match /phonenumbers/{number} {
      allow get: if isAuthed();
      allow create: if isAuthed()
                    && incomingData().uid == uid();
      allow delete: if isAuthed()
                    && resource.data.uid == uid();
    }

    match /chats/{chatId} {
      allow get: if isAuthed()
                  && uid() in resource.data.members;
      
      allow list: if isAuthed()
                   && request.query.where.find(p => p[0] == "members" && p[1] == "array-contains" && p[2] == uid()) != null;

      allow create: if isAuthed()
                    && uid() in incomingData().members
                    // Group Chat Creation
                    && ( (incomingData().isGroup == true && uid() in incomingData().admins) ||
                    // 1-on-1 Chat Creation
                         (incomingData().isGroup == false && incomingData().members.size() == 2 && path == incomingData().members.sort().join('_'))
                       );

      allow update: if isAuthed()
                    && uid() in resource.data.members
                    // Allow admins to manage group
                    && ( (uid() in resource.data.admins && incomingData().diff(resource.data).affectedKeys().hasOnly(['members', 'memberProfiles', 'admins', 'groupName', 'groupAvatarURL'])) ||
                    // Allow any member to update typing, last message, mutedBy, or wallpaper
                         (incomingData().diff(resource.data).affectedKeys().hasOnly(['typing', 'lastMessage', 'mutedBy', 'wallpaperURL']))
                       );

      // Messages Subcollection
      match /messages/{messageId} {
        allow read: if isChatMember(chatId);
        
        allow create: if isChatMember(chatId)
                      && incomingData().senderId == uid();

        allow update: if isChatMember(chatId)
                      // Allow original sender to edit content
                      && ( (resource.data.senderId == uid() && incomingData().diff(resource.data).affectedKeys().hasOnly(['content', 'isEdited'])) ||
                      // Allow any member to update reactions or starred status
                           (incomingData().diff(resource.data).affectedKeys().hasOnly(['reactions', 'starredBy', 'readBy']))
                         );
        
        allow delete: if isChatMember(chatId)
                      && resource.data.senderId == uid();
      }
    }

    match /calls/{callId} {
      allow read: if isAuthed()
                  && (uid() == resource.data.callerId || uid() == resource.data.calleeId);

      allow create: if isAuthed()
                    && incomingData().callerId == uid();
      
      allow update: if isAuthed()
                    // Callee can provide the answer
                    && ( (uid() == resource.data.calleeId && incomingData().diff(resource.data).affectedKeys().hasOnly(['answer', 'status', 'connectedAt'])) ||
                    // Caller or Callee can update status to end the call
                         ((uid() == resource.data.callerId || uid() == resource.data.calleeId) && incomingData().status != resource.data.status)
                       );

      // ICE Candidates Subcollections
      match /callerCandidates/{candidateId} {
        allow read, create: if isAuthed() && uid() == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId;
      }

      match /calleeCandidates/{candidateId} {
        allow read, create: if isAuthed() && uid() == get(/databases/$(database)/documents/calls/$(callId)).data.callerId;
      }
    }

    match /feedback/{feedbackId} {
      allow create: if isAuthed() && incomingData().userId == uid();
      allow read, update, delete: if false;
    }
  }
}
