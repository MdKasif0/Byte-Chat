
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Functions ---
    function isAuthed() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthed() && request.auth.uid == userId;
    }

    function isChatMember(chatId) {
      return isAuthed() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
    }

    // --- Collections ---
    match /users/{userId} {
      allow read: if isAuthed();
      // A user can create their own document or update their own data.
      allow write: if isUser(userId);
    }

    match /phonenumbers/{phoneNumber} {
      allow read: if isAuthed();
      // Allow creation only if the UID in the document matches the user's auth UID
      allow create: if isAuthed() && request.resource.data.uid == request.auth.uid;
      // Phone numbers are unique and should not be changed.
      allow update, delete: if false;
    }

    match /chats/{chatId} {
      // Allow a user to get a single chat document if they are a member.
      allow get: if isChatMember(chatId);

      // Allow a user to query their own chats. The client query MUST include
      // `where('members', 'array-contains', currentUserId)` for this to work.
      allow list: if isAuthed();

      // Allow creation of a 1-on-1 chat if the creator is a member, the ID is correctly formatted,
      // and the members list is sorted.
      allow create: if isAuthed()
                    && request.resource.data.isGroup == false
                    && request.auth.uid in request.resource.data.members
                    && request.resource.data.members.size() == 2
                    && request.resource.data.members[0] < request.resource.data.members[1]
                    && chatId == request.resource.data.members.join('_');
      
      // Allow creation of a group chat if the creator is an admin.
      allow create: if isAuthed()
                    && request.resource.data.isGroup == true
                    && request.auth.uid in request.resource.data.admins;

      // Allow updates (e.g., lastMessage, typing) if the user is a member.
      allow update: if isChatMember(chatId);
      
      // Do not allow chats to be deleted.
      allow delete: if false;

      match /messages/{messageId} {
        // A user can read/create messages in a chat they are a member of.
        allow read, create: if isChatMember(chatId);

        // Allow updates to reactions/starredBy by any member.
        // Allow updates to content only by the original sender.
        allow update: if isChatMember(chatId)
                      && ((resource.data.senderId == request.auth.uid
                           && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content', 'isEdited']))
                          || (request.resource.data.diff(resource.data).affectedKeys().hasAny(['reactions', 'starredBy'])));

        // Only the sender can delete their own message.
        allow delete: if isChatMember(chatId) && resource.data.senderId == request.auth.uid;
      }
    }

    match /calls/{callId} {
      // Only members of the call can access it.
      allow read, write: if isAuthed() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);

      match /callerCandidates/{candidateId} {
        // Only the callee can read caller candidates. Caller creates them.
        allow read: if isAuthed() && request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId;
        allow create: if isAuthed() && request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId;
      }
      
      match /calleeCandidates/{candidateId} {
         // Only the caller can read callee candidates. Callee creates them.
        allow read: if isAuthed() && request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId;
        allow create: if isAuthed() && request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId;
      }
    }

    match /feedback/{feedbackId} {
        allow create: if isAuthed();
    }
  }
}
