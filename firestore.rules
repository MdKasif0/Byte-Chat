rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthed() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthed() && request.auth.uid == userId;
    }

    // --- User Data ---
    match /users/{userId} {
      allow get: if isAuthed();
      allow create: if isUser(userId) && request.resource.data.uid == userId;
      allow update: if isUser(userId);
      allow delete: if false;
    }

    match /phonenumbers/{phoneNumber} {
      allow get: if isAuthed();
      allow create: if isAuthed() && request.resource.data.uid == request.auth.uid;
      allow delete: if isAuthed() && resource.data.uid == request.auth.uid;
      allow update: if false;
    }

    // --- Chat Data ---
    match /chats/{chatId} {
      function isChatMember() {
        // For existing documents.
        return request.auth.uid in resource.data.members;
      }
      function isRequestingUserInMembers() {
        // For new documents.
        return request.auth.uid in request.resource.data.members;
      }

      // Allow reading a chat document or updating it only if the user is a member.
      allow get, update: if isAuthed() && isChatMember();
      
      // Allow creating a chat only if the requesting user is in the members list.
      allow create: if isAuthed() && isRequestingUserInMembers();

      // For listing chats, we depend on the client-side query to be secure.
      // e.g., where('members', 'array-contains', auth.uid)
      // This is a common and necessary pattern for array-based membership.
      allow list: if isAuthed();

      allow delete: if false;

      // --- Messages Sub-collection ---
      match /messages/{messageId} {
        function isMessageSender() {
          return request.auth.uid == resource.data.senderId;
        }

        // Members of the chat can read all messages.
        allow read: if isAuthed() && get(/databases/$(database)/documents/chats/$(chatId)).data.members[request.auth.uid];

        // Members of the chat can create messages.
        allow create: if isAuthed() 
                      && request.resource.data.senderId == request.auth.uid
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;

        // Members can update (for reactions/starring), but only the sender can edit content.
        allow update: if isAuthed() && get(/databases/$(database)/documents/chats/$(chatId)).data.members[request.auth.uid]
                       && (
                         // Allow any member to update reactions or starred status
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions', 'starredBy']) ||
                         // Only allow the original sender to edit the content
                         (isMessageSender() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content', 'isEdited']))
                       );

        // Only the sender can delete their own message.
        allow delete: if isAuthed() && isMessageSender();
      }
    }

    // --- Calls & Signaling ---
    match /calls/{callId} {
      function isCallParticipant() {
        let call = get(/databases/$(database)/documents/calls/$(callId));
        return request.auth.uid == call.data.callerId || request.auth.uid == call.data.calleeId;
      }
      
      // A user can get a call document if they are the caller or callee.
      allow get: if isAuthed() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);
      
      // A user can create a call if they are the designated caller.
      allow create: if isAuthed() && request.resource.data.callerId == request.auth.uid;
      
      // A user can update the call if they are the caller or callee.
      allow update: if isAuthed() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);

      // Client must query for calls where they are the caller or callee.
      allow list: if isAuthed();
      
      // ICE candidates sub-collections for WebRTC signaling.
      match /{candidates=**} {
        allow read, create: if isCallParticipant();
      }
    }

    // --- Feedback ---
    match /feedback/{feedbackId} {
      allow create: if isAuthed();
      allow read, update, delete: if false;
    }
  }
}
