rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Users: Can only be read by signed in users.
    // Can only be created or updated by the user themselves.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isUser(userId);
      // No one can delete user profiles for now
      allow delete: if false;
    }

    // Phone Numbers: Used for lookup to prevent duplicates.
    // Read: Can't be read directly for privacy.
    // Create/Delete: Only when setting up/changing a user's own number.
    match /phonenumbers/{phoneNumber} {
      allow read: if false;
      // This is a simplified rule. A more secure version might use a Cloud Function.
      // It allows a signed-in user to create a document if they are the one being assigned to it.
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      // Allow a user to delete their own old phone number document.
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // Chats: Can only be accessed by members of the chat.
    match /chats/{chatId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.members;
      // Only the chat creator can create a chat, enforced by application logic
      allow create: if isSignedIn();

      // Messages: Can only be accessed by members of the parent chat.
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        // Users can update (react, edit) or delete their own messages.
        allow update, delete: if isSignedIn() && request.auth.uid == resource.data.senderId;
      }
    }

    // Calls: Signaling messages can be created by signed-in users and then read/updated by participants.
    match /calls/{callId} {
       allow read, update, delete: if isSignedIn() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);
       allow create: if isSignedIn();

       // ICE Candidates: Sub-collection for WebRTC signaling.
       match /{collection}/{candidateId} {
         allow read, create: if isSignedIn() && (request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId || request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId);
       }
    }

    // Feedback: Any authenticated user can create feedback.
    match /feedback/{feedbackId} {
      allow create: if isSignedIn();
      // Only backend processes should read feedback.
      allow read, update, delete: if false;
    }
  }
}
