
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is a member of a chat
    function isChatMember(chatId) {
      return isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
    }
    
    // Helper function to check if the user is an admin of a group chat
    function isChatAdmin(chatId) {
        return isChatMember(chatId) && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.admins;
    }

    // Users can read their own profile, and other users can read limited public info
    match /users/{userId} {
      allow read: if isAuthenticated();
      // A user can create their own profile document
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // A user can only update their own profile
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Phone numbers are used for lookup, but should be protected
    match /phonenumbers/{phoneNumber} {
        // Only authenticated users can look up numbers
        allow read: if isAuthenticated();
        // A user can only create a phonenumber doc for themselves if they don't already have one
        allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
        // A user can only delete their own phone number mapping
        allow delete: if isAuthenticated() && get(path(request.path)).data.uid == request.auth.uid;
    }

    // Chats collection
    match /chats/{chatId} {
      // Allow read, update, delete only if the user is a member of the chat
      allow read, delete: if isChatMember(chatId);
      // Allow updates (like changing name, wallpaper, members)
      allow update: if isChatMember(chatId); 
      // Allow creation of new chats
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members;

      // Messages subcollection
      match /messages/{messageId} {
        // Allow read and create if the user is a member of the chat
        allow read, create: if isChatMember(chatId);
        // Allow update (edit, react, star) only by the message sender
        allow update: if isChatMember(chatId);
        // Allow delete only by the message sender
        allow delete: if isChatMember(chatId) && request.auth.uid == get(/databases/$(database)/documents/chats/$(chatId)/messages/$(messageId)).data.senderId;
      }
    }
    
    // Calls collection for signaling
    match /calls/{callId} {
        // Anyone authenticated can create a call document
        allow create: if isAuthenticated();
        // Only involved parties (caller or callee) can read the call document
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);
        // Only involved parties can update (e.g., answer, status change)
        allow update: if isAuthenticated() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);

        // ICE candidates subcollections
        match /{candidateCollection}/{candidateId} {
            // Only involved parties can create ICE candidates
            allow create: if isAuthenticated() && (request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId || request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId);
            // No one should be able to read/update/delete specific candidates after creation
            allow read, update, delete: if false;
        }
    }
    
    // Feedback collection
    match /feedback/{feedbackId} {
        // Only authenticated users can submit feedback
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
        // Disallow reading, updating, or deleting feedback for privacy
        allow read, update, delete: if false;
    }
  }
}
