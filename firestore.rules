rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated.
    function isAuthed() {
      return request.auth != null;
    }

    // ========= USERS, PROFILES, & FEEDBACK =========
    match /users/{userId} {
      allow read: if isAuthed();
      allow create, update: if isAuthed() && request.auth.uid == userId;
    }

    match /phonenumbers/{phoneNumber} {
      allow read: if isAuthed();
      allow create: if isAuthed() && request.resource.data.uid == request.auth.uid;
      allow delete: if isAuthed() && resource.data.uid == request.auth.uid;
    }

    match /feedback/{feedbackId} {
      allow create: if isAuthed() && request.resource.data.userId == request.auth.uid;
    }

    // ========= CHATS & MESSAGES =========
    match /chats/{chatId} {
      // Helper function to check if the current user is a member of this chat.
      function isChatMember() {
        return isAuthed() && request.auth.uid in resource.data.members;
      }

      // Allow reading a chat document if the user is a member.
      allow get: if isChatMember();

      // Allow listing chats only when the query filters for the user's membership.
      allow list: if isAuthed() && request.query.where.path == 'members' && request.query.where.op == 'array-contains' && request.query.where.value == request.auth.uid;

      // Allow creating a chat if the user is included in the new members list.
      allow create: if isAuthed() && request.auth.uid in request.resource.data.members;

      // Allow updates (e.g., lastMessage, typing) if the user is a member.
      allow update: if isChatMember();

      // --- MESSAGES SUBCOLLECTION ---
      match /messages/{messageId} {
        function isMessageSender() {
          return isAuthed() && request.auth.uid == resource.data.senderId;
        }
        
        function isParentChatMember() {
            return isAuthed() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        }

        // Allow reading messages if the user is a member of the parent chat.
        allow read, list: if isParentChatMember();

        // Allow creating a message if the user is a member and the designated sender.
        allow create: if isParentChatMember() && request.resource.data.senderId == request.auth.uid;

        // Allow updates (like reactions) by any chat member.
        // Content can only be edited by the original sender.
        allow update: if isParentChatMember() &&
          (resource.data.content == request.resource.data.content || isMessageSender());

        // Allow the sender to delete their own message.
        allow delete: if isMessageSender();
      }
    }

    // ========= CALLS & SIGNALING =========
    match /calls/{callId} {
        function isCaller() {
            return isAuthed() && request.auth.uid == resource.data.callerId;
        }
        function isCallee() {
            return isAuthed() && request.auth.uid == resource.data.calleeId;
        }

        // Only the caller or callee can read call details.
        allow read: if isCaller() || isCallee();
        
        // Only the authenticated caller can create a call document.
        allow create: if isAuthed() && request.resource.data.callerId == request.auth.uid;

        // Caller or callee can update the call (e.g., status, answer).
        allow update: if isCaller() || isCallee();

        // --- ICE CANDIDATES SUBCOLLECTIONS ---
        match /callerCandidates/{candidateId} {
          // The caller can add their ICE candidates.
          allow create: if isAuthed() && request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId;
        }

        match /calleeCandidates/{candidateId} {
          // The callee can add their ICE candidates.
          allow create: if isAuthed() && request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId;
        }
    }
  }
}