
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthed() {
      return request.auth != null;
    }

    match /users/{userId} {
      allow read: if isAuthed();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    match /phonenumbers/{phone} {
      allow read, write: if isAuthed();
    }

    match /chats/{chatId} {
      // GET: Allow reading a single chat doc if the user is a member.
      // This rule also handles the case where the document doesn't exist yet, which is
      // necessary for the app to check if a chat needs to be created.
      allow get: if isAuthed() && 
                    ( (resource != null && request.auth.uid in resource.data.members) || 
                      (resource == null && request.auth.uid in chatId.split('_')) );
      
      // LIST: Allow any authenticated user to query the chats collection.
      // The query in the app ("where member array contains user ID") ensures they only
      // see their own chats, and the 'get' rule above secures direct access.
      allow list: if isAuthed();
      
      // CREATE: Allow creating a chat if the user is a member and the data is valid.
      allow create: if isAuthed() && request.auth.uid in request.resource.data.members && (
        // Case 1: 1-on-1 Chat
        (
          request.resource.data.isGroup == false &&
          request.resource.data.members[0] < request.resource.data.members[1] &&
          chatId == request.resource.data.members[0] + '_' + request.resource.data.members[1]
        ) ||
        // Case 2: Group Chat
        (
          request.resource.data.isGroup == true &&
          request.auth.uid in request.resource.data.admins
        )
      );

      // UPDATE: Allow updates if the user is a member.
      allow update: if isAuthed() && request.auth.uid in resource.data.members;

      match /messages/{messageId} {
        allow read, write: if isAuthed() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }

    match /calls/{callId} {
      allow create: if isAuthed() && request.auth.uid == request.resource.data.callerId;
      allow read, update: if isAuthed() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);
      
      match /candidatesCollection/{candidateId} {
        allow create: if isAuthed() && (
          request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId ||
          request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId
        );
      }
    }
    
    match /feedback/{feedbackId} {
      allow create: if isAuthed();
    }
  }
}
